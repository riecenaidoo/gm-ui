:root {
  /* Minimalist and Modern Palette Color Palette: https://www.color-hex.com/color-palette/1055648 */
  --palette-accent: #e6e6fa;
  --palette-bg: #e0e0e0;
  --palette-bg-darker: #a8a8a8;
  --palette-content: #ffffff;
  --palette-text: #333333;

  /* Default Fonts */
  font-style: normal;
  font-family: Tahoma, sans-serif;
}

body {
  background: var(--palette-bg);
  color: var(--palette-text);
  margin: 0;
  height: 100vh;
}

/* Layout Classes */

.app-layout {
  /* Allow the header, and any navigation to stack on top of the main content of the page */
  display: flex;
  flex-direction: column;
  height: 100%;

  main {
    /* The main content should consume the remaining space, and if it is not enough it should scroll so that the
     remainder of the layout stays in view. */
    flex-grow: 1;
    overflow-y: auto;
  }
}

.header-bar {
  height: 4rem;
  border-bottom-style: solid;
  border-bottom-width: 0.25rem;
  border-bottom-color: var(--palette-accent);
  border-bottom-left-radius: 0;
  border-bottom-right-radius: 0;
  box-sizing: border-box; /* <1> */
  flex-shrink: 0; /* <2> */

  /* <1>
   Include the border in the height calculation. This is usually the default, but for some elements like the `<header>`
   tag, the default is different (`context-box`) which will cause the header-bar 'height' to appear inconsistent.
   */

  /* <2>
   The header-bar should remain fixed and never shrink.
   This is only applicable in a layout where the header-bar is a flex child.
  */
}

main.page {
  box-sizing: border-box; /* <1> */
  display: flex;
  flex-direction: column;
  gap: 1.5rem;
  height: 100%; /* <1> */
  padding: 3rem 3rem 0;

  @media (max-width: 768px) {
    padding: 1.5rem 1.5rem 0;
  }

  .page-scrolling {
    flex-grow: 1;
    overflow-y: auto; /* <1> */
    padding-bottom: 1rem;
  }

  /* <1> Page Scrolling Layout

The app itself should not scroll. The Header, Controls, etc. should always be in a fixed position.
To accomplish this we want the component to consume 100% of its parent's height,
and then within the page we allow a particular element to scroll if there is too little space to render all content.

We need to use border-box sizing so the padding and border sizes for the elements are included in the calculation for its
height. If we do not do this the app itself will scroll because it will be of 100vh + margin/padding in height.
  */
}

.modal {
  background: var(--palette-content);
  border-radius: 0.5rem;
  left: 50%;
  padding: 3rem;
  position: absolute;
  top: 50%;
  /* Moves it 50% to the left and 50% up, so that it is now centered at its point */
  transform: translate(-50%, -50%);
  z-index: 2;
}

.control-bar {
  background: var(--palette-bg-darker);
  display: flex;
  flex-shrink: 0; /* <1> */
  grid-column: span 4;
  grid-row: 1;
  height: 3rem;

  input {
    margin-left: auto;
    padding-left: 1.5rem;
    width: 30%;
  }

  button {
    aspect-ratio: 1/1;
    border: none;
    border-radius: 0;
    margin: 0.5rem 0 0.5rem 0.5rem;
  }
}

article.tile {
  /* Each tile is self-contained, which is represented best as an article. */
  aspect-ratio: 4/4.75;
  border-radius: 0.5rem;
  display: grid;

  /* The shape of a tile is square, for the content, and a tray/gutter for information. */
  grid-template-columns: repeat(3, 1fr);
  grid-template-rows: repeat(3, 1fr) minmax(0, 0.75fr); /*<1>*/
  width: 100%;

  &:hover,
  &:focus-within {
    /* The tile is interactable. */
    background-color: rgba(0, 0, 0, 0.2);
    border-bottom: 0.25rem solid var(--palette-accent);
    box-sizing: border-box; /*<2>*/
  }

  :focus-visible {
    /* We use custom fx to denote it is focused/interactable */
    outline: none;
  }

  p {
    grid-column: 1/4;
    grid-row: 4;
    overflow: auto; /*<1>*/
    align-content: center;
    padding-left: 0.5rem;
    padding-right: 0.5rem;
  }

  button {
    background-color: transparent;
    border: none;
    cursor: pointer;

    i {
      align-content: center;
      aspect-ratio: 1/1;
      background-color: var(--palette-accent);
      border-radius: 100%;
      font-size: 1.5rem;
      text-align: center;
      width: 100%;
    }
  }

  /* <1>:
   - https://stackoverflow.com/a/52861514
   - https://stackoverflow.com/a/43312314

   When the screen area is too small, or the label requires more space than available in its position in the last row,
   the grid will expand its minimum dimensions to fit the label - we don't really want that.

   The label should overflow and not break the tiling layout.
   */

  /*  <2>:

   Include the border in the tile size calculation to prevent it from growing, and causing the grid row to grow
   when a border is added.
   */
}

@media (prefers-color-scheme: dark) {
  .adaptive-filter {
    /* Lightens colours (mainly for solid black icon images) during dark theme. */
    filter: invert(60%);
  }

  :root {
    --palette-accent: #c9dae2;
    --palette-bg: #1b1b1b;
    --palette-bg-darker: #000000;
    --palette-content: #403f3f;
    --palette-text: #e6e6e6;
  }
}
